import{_ as e}from"./plugin-vue_export-helper-c27b6911.js";import{o as a,c as s,e as o}from"./app-433367d1.js";const n={},i=o(`<h1 id="orquestracao-de-conteineres" tabindex="-1"><a class="header-anchor" href="#orquestracao-de-conteineres" aria-hidden="true">#</a> Orquestração de contêineres</h1><p>A Orquestração de Contêineres é um processo de automatizar o gerenciamento de um grupo de contêineres. Os orquestradores de contêineres são responsáveis por tarefas como:</p><ul><li>Aprovisionamento de contêineres</li><li>Escalamento de contêineres</li><li>Balanceamento de carga entre contêineres</li><li>Gerenciamento de rede entre contêineres</li><li>Monitoramento de contêineres</li><li>Recuperação de contêineres em caso de falha</li></ul><h2 id="aplicativos-compostos" tabindex="-1"><a class="header-anchor" href="#aplicativos-compostos" aria-hidden="true">#</a> Aplicativos compostos</h2><p>O Docker Compose é uma ferramenta de linha de comando que permite definir e executar aplicativos compostos de contêineres de forma declarativa. Um aplicativo composto é um grupo de contêineres que interagem entre si para formar uma aplicação completa.</p><p>O Docker Compose é escrito em YAML e é usado para definir um arquivo de composição. Um arquivo de composição é um arquivo de texto que define a configuração de um aplicativo composto. O arquivo de composição especifica os contêineres que fazem parte do aplicativo, as imagens que são usadas para criar os contêineres e as portas que são expostas pelos contêineres.</p><p>Para usar o Docker Compose, você primeiro precisa criar um arquivo de composição. Depois de criar um arquivo de composição, você pode usar o comando <code>docker compose up</code> para iniciar o aplicativo composto. O comando <code>docker compose up</code> criará os contêineres especificados no arquivo de composição e os iniciará.</p><p>O <strong>Docker Compose</strong> é uma ferramenta poderosa que pode ser usada para simplificar o desenvolvimento e a implantação de aplicativos Docker. O Docker Compose pode ser usado para desenvolver e implantar aplicativos de qualquer tamanho, desde pequenos aplicativos de um contêiner até grandes aplicativos de vários contêineres.</p><p>Aqui estão alguns dos benefícios de usar o Docker Compose:</p><ul><li>Simplifica o desenvolvimento e a implantação de aplicativos Docker.</li><li>Permite definir e executar aplicativos compostos de contêineres de forma declarativa.</li><li>É uma ferramenta poderosa que pode ser usada para desenvolver e implantar aplicativos de qualquer tamanho.</li></ul><p>Se você está usando Docker, eu recomendo que você experimente o Docker Compose. O Docker Compose pode simplificar o desenvolvimento e a implantação de seus aplicativos Docker e pode ajudá-lo a construir aplicativos mais complexos e poderosos.</p><p>A relação entre Orquestração de Contêineres e Docker Compose é que o Docker Compose é uma ferramenta que pode ser usada para simplificar o desenvolvimento e a implantação de aplicativos Docker. O Docker Compose pode ser usado para definir e executar aplicativos compostos de contêineres de forma declarativa. Isso pode ajudar você a automatizar tarefas como aprovisionamento, escalamento e gerenciamento de rede entre contêineres.</p><p>um exemplo de arquivo do Docker Compose para iniciar um aplicativo composto:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3&#39;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> nginx<span class="token punctuation">:</span>latest
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token datetime number">80:80</span>
  <span class="token key atrule">db</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> mysql<span class="token punctuation">:</span>latest
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> password
  <span class="token key atrule">redis</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> redis<span class="token punctuation">:</span>latest

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="orquestradores" tabindex="-1"><a class="header-anchor" href="#orquestradores" aria-hidden="true">#</a> Orquestradores</h2><p>Os orquestradores de contêineres são uma ferramenta essencial para gerenciar aplicativos em grande escala. Eles podem ajudar você a automatizar tarefas, escalar seus aplicativos de forma rápida e fácil, e manter seus aplicativos disponíveis e funcionando corretamente.</p><p>Existem vários orquestradores de contêineres disponíveis, incluindo:</p><ul><li>Kubernetes</li><li>Docker Swarm</li><li>Mesos</li><li>DC/OS</li></ul><p>Cada orquestrador de contêineres tem suas próprias características e vantagens. É importante escolher o orquestrador de contêineres certo para suas necessidades.</p><p>Aqui estão alguns exemplos de como você pode usar cada orquestrador de contêineres:</p><ul><li><em>Kubernetes</em>: Kubernetes é um orquestrador de contêineres de código aberto que é usado por empresas de todos os tamanhos. Kubernetes é uma ferramenta poderosa que pode ser usada para gerenciar aplicativos complexos e de grande escala.</li><li><em>Docker Swarm</em>: Docker Swarm é um orquestrador de contêineres integrado ao Docker. Docker Swarm é uma boa opção para empresas que já usam o Docker.</li></ul><p>Se você está procurando uma ferramenta para orquestrar contêineres, é importante considerar suas necessidades e requisitos. Existem vários orquestradores de contêineres disponíveis, cada um com suas próprias características e vantagens. Escolha o orquestrador de contêineres certo para suas necessidades e você poderá gerenciar seus aplicativos de forma eficiente e eficaz.</p><p>Aqui estão algumas vantagens da orquestração de contêineres:</p><ul><li>Automatização: Os orquestradores de contêineres podem automatizar tarefas como aprovisionamento, escalamento e gerenciamento de rede entre contêineres. Isso pode economizar tempo e esforço.</li><li>Escalabilidade: Os orquestradores de contêineres podem ajudar você a escalar seus aplicativos de forma rápida e fácil. Isso é importante para empresas que precisam lidar com cargas de trabalho variáveis.</li><li>Disponibilidade: Os orquestradores de contêineres podem ajudar você a manter seus aplicativos disponíveis e funcionando corretamente. Isso é importante para empresas que precisam garantir o tempo de atividade de seus aplicativos.</li><li>Segurança: Os orquestradores de contêineres podem ajudar você a melhorar a segurança de seus aplicativos isolando-os uns dos outros e do sistema operacional host.</li></ul><p>Se você está procurando uma maneira de gerenciar seus aplicativos de forma eficiente, escalável e disponível, a orquestração de contêineres é uma boa opção.</p><h2 id="kubernetes" tabindex="-1"><a class="header-anchor" href="#kubernetes" aria-hidden="true">#</a> Kubernetes</h2><p>O Kubernetes é uma plataforma de orquestração de contêineres de código aberto, que automatiza o processo de implantação, dimensionamento e gerenciamento de aplicativos em contêineres. Abaixo está um exemplo básico de configuração do Kubernetes para implantar um aplicativo simples composto por um pod com um contêiner.</p><p>Antes de começar, você precisará ter o Kubernetes instalado e configurado em seu ambiente. Há várias maneiras de configurar o Kubernetes, como o uso do Kubernetes localmente usando o Minikube ou usando serviços gerenciados em nuvem, como o Google Kubernetes Engine (GKE), Amazon Elastic Kubernetes Service (EKS) ou Azure Kubernetes Service (AKS).</p><p>Exemplo de configuração do Kubernetes para um aplicativo web simples:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>apiVersion: v1
kind: Service
metadata:
  name: my-app
spec:
  selector:
    app: my-app
  ports:
    - port: 80
      targetPort: 80

apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app
spec:
  replicas: 3
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app
    spec:
      containers:
      - name: my-app
        image: my-app:latest
        ports:
        - containerPort: 80
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Este arquivo de configuração cria um serviço e um desdobramento. O serviço expõe o aplicativo web no nó Kubernetes na porta 80. O desdobramento cria três pods que executam o aplicativo web. Cada pod executa uma imagem Docker com o aplicativo web.</p><p>Para implantar este aplicativo, você pode usar o comando <code>kubectl apply</code> para aplicar o arquivo de configuração ao cluster Kubernetes. Depois de aplicar o arquivo de configuração, o aplicativo web estará disponível no nó Kubernetes na porta 80.</p><p>Este é apenas um exemplo de configuração do Kubernetes. Você pode personalizar o arquivo de configuração para atender às suas necessidades específicas. Por exemplo, você pode alterar o número de pods que executam o aplicativo web, ou você pode alterar a porta em que o aplicativo web está exposto.</p><h3 id="pod" tabindex="-1"><a class="header-anchor" href="#pod" aria-hidden="true">#</a> Pod</h3><p>Em Kubernetes, um pod é o menor contêiner de execução gerenciado por Kubernetes. Um pod é um grupo de um ou mais contêineres que estão empacotados juntos e compartilham um espaço de rede e um espaço de armazenamento. Os contêineres em um pod são executados no mesmo nó e têm um identificador de pod compartilhado.</p><p>Os pods são a menor unidade de escalabilidade e implantação em Kubernetes. Você pode implantar um pod ou um grupo de pods. Os pods também são o menor e mais móvel grupo de recursos que você pode gerenciar no Kubernetes.</p><p>Os pods são importantes porque fornecem uma maneira de agrupar contêineres que se relacionam entre si. Por exemplo, você pode usar um pod para executar um servidor web e um banco de dados. Os contêineres no pod podem se comunicar uns com os outros usando seus endereços IP privados.</p><p>Os pods também fornecem uma maneira de gerenciar recursos de rede e armazenamento para um grupo de contêineres. Por exemplo, você pode definir um limite de memória para um pod. Isso garantirá que o pod não use mais memória do que você especificou.</p><p>Os pods são uma ferramenta poderosa que pode ser usada para gerenciar aplicativos em Kubernetes. Eles são a menor unidade de escalabilidade e implantação, e fornecem uma maneira de agrupar contêineres que se relacionam entre si.</p><h2 id="docker-swarm" tabindex="-1"><a class="header-anchor" href="#docker-swarm" aria-hidden="true">#</a> Docker Swarm</h2><p>O Docker Swarm é uma ferramenta nativa do Docker que permite criar e gerenciar clusters de contêineres para implantar aplicativos em escala. Abaixo está um exemplo básico de configuração do Docker Swarm usando o Docker Engine. Neste exemplo, vamos criar um cluster de três nós para executar uma pilha simples composta por um serviço web e um serviço de banco de dados.</p><p>Antes de começar, verifique se você tem o Docker instalado em todas as máquinas que deseja adicionar ao cluster. Certifique-se também de que os nós possam se comunicar entre si na rede.</p><p>Passo 1: Inicialização do Swarm (em um dos nós) Vamos inicializar o Swarm em um dos nós e obter um token para adicionar outros nós ao cluster.</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker swarm init --advertise-addr SEU_IP_DO_NODO_PRINCIPAL
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Isso irá configurar o Docker Swarm no nó principal e fornecer um token para adicionar mais nós ao cluster.</p><p>Passo 2: Adicionar nós ao cluster (nos outros dois nós) Agora, você precisará adicionar os outros dois nós ao cluster usando o token gerado no passo anterior. Execute o comando abaixo em cada nó:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker swarm join --token SEU_TOKEN SEU_IP_DO_NODO_PRINCIPAL:2377
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Passo 3: Verificar o status do Swarm (opcional) Você pode verificar o status do Swarm executando o seguinte comando em qualquer um dos nós:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker node ls
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Ele mostrará uma lista dos nós no cluster e suas respectivas informações.</p><p>Passo 4: Criação da pilha de serviços Agora, vamos criar uma pilha que consiste em um serviço web e um serviço de banco de dados. Crie um arquivo chamado <code>docker-compose.yml</code> com o seguinte conteúdo:</p><div class="language-yaml line-numbers-mode" data-ext="yml"><pre class="language-yaml"><code><span class="token key atrule">version</span><span class="token punctuation">:</span> <span class="token string">&#39;3.8&#39;</span>
<span class="token key atrule">services</span><span class="token punctuation">:</span>
  <span class="token key atrule">web</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> sua_imagem_web<span class="token punctuation">:</span>latest
    <span class="token key atrule">deploy</span><span class="token punctuation">:</span>
      <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">3</span>
      <span class="token key atrule">restart_policy</span><span class="token punctuation">:</span>
        <span class="token key atrule">condition</span><span class="token punctuation">:</span> on<span class="token punctuation">-</span>failure
    <span class="token key atrule">ports</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> <span class="token string">&quot;80:80&quot;</span>
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> webnet

  <span class="token key atrule">db</span><span class="token punctuation">:</span>
    <span class="token key atrule">image</span><span class="token punctuation">:</span> sua_imagem_db<span class="token punctuation">:</span>latest
    <span class="token key atrule">deploy</span><span class="token punctuation">:</span>
      <span class="token key atrule">replicas</span><span class="token punctuation">:</span> <span class="token number">1</span>
      <span class="token key atrule">restart_policy</span><span class="token punctuation">:</span>
        <span class="token key atrule">condition</span><span class="token punctuation">:</span> on<span class="token punctuation">-</span>failure
    <span class="token key atrule">environment</span><span class="token punctuation">:</span>
      <span class="token key atrule">MYSQL_ROOT_PASSWORD</span><span class="token punctuation">:</span> senha_root
      <span class="token key atrule">MYSQL_DATABASE</span><span class="token punctuation">:</span> nome_do_banco
    <span class="token key atrule">networks</span><span class="token punctuation">:</span>
      <span class="token punctuation">-</span> webnet

<span class="token key atrule">networks</span><span class="token punctuation">:</span>
  <span class="token key atrule">webnet</span><span class="token punctuation">:</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Neste exemplo, você precisará substituir <code>sua_imagem_web:latest</code> e <code>sua_imagem_db:latest</code> pelas imagens Docker que você deseja usar para o serviço web e o serviço de banco de dados, respectivamente.</p><p>Passo 5: Implantação da pilha Após criar o arquivo <code>docker-compose.yml</code>, implante a pilha de serviços com o seguinte comando:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>docker stack deploy -c docker-compose.yml minha_pilha
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>Agora você terá uma pilha de serviços em execução no cluster do Docker Swarm. Os serviços web estarão acessíveis através do endereço IP de qualquer um dos nós no porto 80.</p><p>Lembre-se de que este é um exemplo básico e, dependendo das necessidades do seu aplicativo, você pode precisar configurar várias opções adicionais do Docker Swarm. Para mais detalhes sobre as opções disponíveis, consulte a documentação oficial do Docker Swarm.</p>`,57),r=[i];function t(c,d){return a(),s("div",null,r)}const l=e(n,[["render",t],["__file","10_Orquestracao.html.vue"]]);export{l as default};
